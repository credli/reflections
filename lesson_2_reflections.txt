## What happens when you initialize a repository? Why do you need to do it?

Technically, initializing a git repository will create a .git folder inside my project directory, which means a new repository for that directory was created.

## How is the staging area different from the working directory and the repository? What value do you think it offers?

Working directory is the folder containing the initialized git repository, it normally includes all files in that sub-directory.Staging area bundles the changes made on only the files added to it (i.e. must be committed), the value it offers is that it allows us to logically manage commits by choosing which files are going to be included.

## How can you use the staging area to make sure you have one commit per logical change?

First I compare changes in my working directory with $ git diff, then I decide which files to stage based on those changes, I may want to add only the files that contained changes related a certain logic. Once I make up my mind, I add relevant changes to the staging area with $ git add file1 file2, finally I commit with $ git commit adding a meaningful message related to the logical change.

## What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when I want to experiment with new features or try fix bugs in my code. Master branch is the production quality branch that is expected to never break, all intermediary states of my development take place in branches to avoid breaking the master.

## How do the diagrams help you visualize the branch structure?

By showing the relationship between commit parents on the master branch, and other branches deriving from it.

## What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches makes all commits introduced in the new branch accessible in the merged branch. We represent it to know which branch included certain commits.